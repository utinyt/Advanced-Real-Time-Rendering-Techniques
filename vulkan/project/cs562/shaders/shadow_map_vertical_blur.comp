#version 460 core

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform readonly image2D src;
layout(binding = 1, rgba32f) uniform writeonly image2D dst;
layout(binding = 2) uniform BlurKernelBuffer {
	vec4 kernel[26]; //for alignment: 26 vec4 -> 104 floats
};

layout(push_constant) uniform PS{
	int shadowDim;
	int kernelWidth;
};

shared vec4 col[128 + 100]; // 128 thread group + max kernel radius (50) * 2

//no shared variables - not optimized
//vec4 blur(ivec2 gpos){
//	vec4 sum = vec4(0);
//	int xOffsetFactor = horizontalBlur;
//	int yOffsetFactor = xOffsetFactor == 1 ? 0 : 1;
//	int boundaryCheckIndex = xOffsetFactor == 1 ? 0 : 1;
//	
//	for(int i = -kernelWidth; i <= kernelWidth; ++i){
//		ivec2 pos = gpos + i * ivec2(xOffsetFactor, yOffsetFactor);
//
//		//shadow map boundary check - clamp
//		if(pos[boundaryCheckIndex] < 0)
//			pos[boundaryCheckIndex] = 0;
//		else if(pos[boundaryCheckIndex] > 1023)
//			pos[boundaryCheckIndex] = 1023;
//
//		//weighted average
//		int vecIndex = (i + kernelWidth) / 4;
//		int elementIndex = (i + kernelWidth) % 4;
//		sum += kernel[vecIndex][elementIndex] * imageLoad(src, pos);
//	}
//	return sum;
//}

//shadow map boundary index clamp
int boundaryCheck(int i){
	if(i < 0)
		i = 0;
	else if(i > shadowDim - 1)
		i = shadowDim - 1;
	return i;
}

void main(){
	const ivec2 gpos = ivec2(gl_GlobalInvocationID.yx); //swapped (horizontal -> vertical)
	const uint sharedMemoryIndex = gl_LocalInvocationID.x;

	//image load to shared variables
	ivec2 pos = gpos + ivec2(0, -kernelWidth);
	pos.y = boundaryCheck(pos.y);
	col[sharedMemoryIndex] = imageLoad(src, pos);

	//load more samples
	if(sharedMemoryIndex < 2 * kernelWidth){
		pos = gpos + ivec2(0, 128 - kernelWidth);
		pos.y = boundaryCheck(pos.y);
		col[sharedMemoryIndex + 128] = imageLoad(src, pos);
	}

	//sync
	barrier();

	//calculate weighted average
	vec4 sum = vec4(0);
	for(int i = 0; i <= 2 * kernelWidth; ++i){
		int vecIndex = i / 4;
		int elementIndex = i % 4;
		sum += kernel[vecIndex][elementIndex] * col[sharedMemoryIndex + i];
	}

	imageStore(dst, gpos, sum);
}
