#version 460 core

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform readonly image2D src;
layout(binding = 1, rgba32f) uniform writeonly image2D dst;
layout(binding = 2) uniform BlurKernelBuffer {
	vec4 kernel[26]; //for alignment: 26 vec4 -> 104 floats
};

layout(push_constant) uniform PS{
	int horizontalBlur; // 1 for true, 0 for false
	int kernelWidth;
};

void main(){
	vec4 sum = vec4(0);
	ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);
	imageLoad(src, gpos);

	if(horizontalBlur == 1){
		for(int i = -kernelWidth; i <= kernelWidth; ++i){
			int vecIndex = (i + kernelWidth) / 4;
			int elementIndex = (i + kernelWidth) % 4;
			ivec2 pos = gpos + ivec2(i, 0);
			if(pos.x < 0)
				pos.x = 0;
			else if(pos.x > 1023)
				pos.x = 1023;
			sum += kernel[vecIndex][elementIndex] * imageLoad(src, pos);
		}
	}
	else{
		for(int i = -kernelWidth; i <= kernelWidth; ++i){
			int vecIndex = (i + kernelWidth) / 4;
			int elementIndex = (i + kernelWidth) % 4;
			ivec2 pos = gpos + ivec2(0, i);
			if(pos.y < 0)
				pos.y = 0;
			else if(pos.y > 1023)
				pos.y = 1023;
			sum += kernel[vecIndex][elementIndex] * imageLoad(src, pos);
		}
	}

	imageStore(dst, gpos, sum);
}
